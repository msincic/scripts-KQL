//Use VM Insights to list all applications in a computer using network with details about traffic and comms
let computers = VMComputer
    | summarize (TimeGenerated, Properties) = arg_max(TimeGenerated, pack_all()) by Computer;
let ipComputerMapping = computers
    | project Computer, Ipv4 = todynamic(tostring(Properties.Ipv4Addresses_s))
    | mvexpand Ipv4 to typeof(string);
let maliciousIpData = VMConnection
    | where Direction == 'outbound'
    | where Computer contains ''
    | where MaliciousIp != ''
    | summarize
        by
        Computer,
        ProcessName,
        MaliciousIp,
        DestinationPort,
        RemoteIp,
        IsActive,
        IndicatorThreatType,
        RemoteCountry,
        RemoteLongitude,
        RemoteLatitude,
        Confidence,
        Severity,
        FirstReportedDateTime,
        LastReportedDateTime
    | project
        MaliciousIp = strcat(Computer, '-', ProcessName, '-', MaliciousIp),
        MaliciousPort = strcat(Computer, '-', ProcessName, '-', DestinationPort),
        MaliciousPortIp = strcat(Computer, '-', ProcessName, '-', DestinationPort, '-', RemoteIp),
        Computer = Computer,
        Process = strcat(Computer, '-', ProcessName),
        MaliciousIpInfo = pack('Malicious IP', MaliciousIp, 'Is Active', IsActive, 'Indicator Threat Type', IndicatorThreatType, 'Remote Country', RemoteCountry, 'Longitude', RemoteLongitude, 'Latitude', RemoteLatitude, 'Confidence', Confidence, 'Severity', Severity, 'First Reported DateTime', FirstReportedDateTime, 'Last Reported DateTime', LastReportedDateTime, 'Destination Port', DestinationPort, 'Remote IP', RemoteIp);
let totalMaliciousConnectionsCount = maliciousIpData
    | summarize MaliciousIpInfo = count()
    | extend Type = 'Overall';
let computerData = VMConnection
    | where Direction == 'outbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Name = strcat('üñ•Ô∏è ', Computer),
        ComputerName = Computer,
        Type = 'Computer',
        TypeKey = 1,
        Key = Computer,
        ParentKey = '---'
    | join kind=leftouter (maliciousIpData
        | summarize MaliciousIpInfo = tostring(count()) by Computer)
        on $left.Key == $right.Computer
    | project-away Computer
    | order by Name asc;
let processData = VMConnection
    | where Direction == 'outbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Computer,
        ProcessName,
        Name = strcat('üé´ ', ProcessName),
        Type = 'Process',
        TypeKey = 2,
        Key = strcat(Computer, '-', ProcessName),
        ParentKey = Computer,
        ComputerName = Computer
    | join kind=inner computerData on $left.ParentKey == $right.Key
    | project-away
        Name1,
        Responses1,
        LinksFailed1,
        MaxLinksLive1,
        TotalBytesSent1,
        TotalBytesReceived1,
        AverageResponseTime1,
        Type1,
        Key1,
        ParentKey1
    | join kind=leftouter (maliciousIpData
        | summarize MaliciousIpInfo = tostring(count()) by Process)
        on $left.Key == $right.Process
    | project-away Process, MaliciousIpInfo
    | extend MaliciousIpInfo = tostring(MaliciousIpInfo1)
    | project-away MaliciousIpInfo1
    | order by Name asc;
let remoteIpData = VMConnection
    | where 'outbound' == 'outbound'
    | where Direction == 'outbound'
    | where Computer contains ''
    | extend RemoteIp = iff(Direction == 'outbound', DestinationIp, SourceIp)
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Computer,
        ProcessName,
        RemoteIp,
        Type = 'Remote Computer',
        TypeKey = 3,
        Key = strcat(Computer, '-', ProcessName, '-', RemoteIp),
        ParentKey = strcat(Computer, '-', ProcessName),
        ComputerName = Computer
    | join kind=inner processData on $left.ParentKey == $right.Key
    | project-away
        Name,
        Responses1,
        LinksFailed1,
        MaxLinksLive1,
        TotalBytesSent1,
        TotalBytesReceived1,
        AverageResponseTime1,
        Type1,
        Key1,
        ParentKey1
    | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousIp
    | project-away MaliciousIp, Computer, Process, Computer1, Computer2, MaliciousIpInfo
    | extend MaliciousIpInfo = tostring(MaliciousIpInfo1)
    | project-away MaliciousIpInfo1
    | join kind = leftouter (ipComputerMapping) on $left.RemoteIp == $right.Ipv4
    | extend Name = iff(Computer == '', iff(RemoteIp == '127.0.0.1', 'üåê Localhost', strcat('üåê External (', RemoteIp, ')')), strcat('üñ•Ô∏è ', Computer))
    | project-away Computer, Ipv4
    | order by Name desc;
let destinationPortData = VMConnection
    | where Direction == 'outbound'
    | where 'outbound' == 'outbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Computer,
        ProcessName,
        DestinationIp,
        DestinationPort,
        Name = strcat('üî∂ ', DestinationPort),
        Type = 'Remote Port',
        TypeKey = 4,
        Key = strcat(Computer, '-', ProcessName, '-', DestinationIp, '-', tostring(DestinationPort)),
        ParentKey = strcat(Computer, '-', ProcessName, '-', DestinationIp),
        ComputerName = Computer
    | join kind=inner remoteIpData on $left.ParentKey == $right.Key
    | project-away Name1, Responses1, Type1, Key1, ParentKey1
    | order by Name asc;
let sourcePortData = VMConnection
    | where Direction == 'outbound'
    | where 'outbound' == 'inbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Computer,
        ProcessName,
        DestinationIp,
        DestinationPort,
        Name = strcat('üî∂ ', DestinationPort),
        Type = 'Remote Port',
        TypeKey = 4,
        Key = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort)),
        ParentKey = strcat(Computer, '-', ProcessName),
        ComputerName = Computer
    | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousPort
    | extend MaliciousIpInfo = tostring(MaliciousIpInfo)
    | project-away Computer1, MaliciousIp, MaliciousPort, MaliciousPortIp, Process;
let remoteIpDataInbound = VMConnection
    | where Direction == 'inbound'
    | where 'inbound' == 'inbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
        by
        Computer,
        ProcessName,
        RemoteIp,
        Type = 'Remote Computer',
        TypeKey = 3,
        Key = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort), '-', RemoteIp),
        ParentKey = strcat(Computer, '-', ProcessName, '-', tostring(DestinationPort)),
        Id = strcat(Computer, '-', ProcessName, '-', RemoteIp),
        ComputerName = Computer
    | join kind=inner sourcePortData on $left.ParentKey == $right.Key
    | project-away
        AverageResponseTime1,
        Computer1,
        Key1,
        LinksFailed1,
        MaxLinksLive1,
        ParentKey1,
        ProcessName1,
        Responses1,
        TotalBytesReceived1,
        TotalBytesSent1,
        Type1,
        TypeKey1
    | order by Name asc
    | join kind=leftouter ipComputerMapping on $left.RemoteIp == $right.Ipv4
    | extend Name = iff(RemoteIp == '', 'Unknown', strcat('üåê External (', RemoteIp, ')'))
    | project-away Computer, Ipv4
    | order by Name desc
    | join kind=leftouter maliciousIpData on $left.Key == $right.MaliciousPortIp
    | extend MaliciousIpInfo = tostring(MaliciousIpInfo1)
    | project-away MaliciousIp, Computer, Process, Computer1, MaliciousIpInfo1, Id;
let overalldata = VMConnection
    | where Direction == 'outbound'
    | where Computer contains ''
    | summarize
        Responses = sum(Responses),
        LinksFailed = sum(LinksFailed),
        MaxLinksLive = max(LinksLive),
        TotalBytesSent = sum(BytesSent),
        TotalBytesReceived = sum(BytesReceived),
        AverageResponseTime = 1.0 * sum(ResponseTimeSum) / sum(Responses)
    | extend
        Name = 'üîµ Overall',
        Type = 'Overall',
        TypeKey = 0,
        Key = '--Overall--',
        ParentKey = '----'
    | join kind=leftouter totalMaliciousConnectionsCount on Type
    | extend MaliciousIpInfo = iff(MaliciousIpInfo == '0', '', tostring(MaliciousIpInfo))
    | project-away Type1;
computerData
| union processData
| union remoteIpData
| union destinationPortData
| union remoteIpDataInbound
| union sourcePortData
| union overalldata
| extend MaliciousConnectionsCount = iff(MaliciousIpInfo == '', 0, iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', tolong(MaliciousIpInfo), 1))
| project
    ComputerName,
    ProcessName,
    RemoteIp,
    DestinationPort,
    Name = iff(Name == 'üé´ ', 'üé´ <Unknown>', Name),
    Type,
    MaliciousConnections = iff(MaliciousIpInfo == '', '‚úÖ No Malicious Connections', iff(Type == 'Computer' or Type == 'Process' or Type == 'Overall', iff(MaliciousConnectionsCount > 1, strcat('‚ùå ', MaliciousIpInfo, ' Malicious Connections'), strcat('‚ùå ', MaliciousIpInfo, ' Malicious Connection')), '‚ùå Malicious Connection')),
    Responses,
    MaxLinksLive,
    LinksFailed,
    AverageResponseTime,
    TotalBytesSent,
    TotalBytesReceived,
    Info = iff(MaliciousIpInfo != '', MaliciousIpInfo, ''),
    Key,
    ParentKey,
    TypeKey,
    MaliciousConnectionsCount
| order by
    TypeKey asc,
    MaliciousConnectionsCount desc,
    LinksFailed desc,
    AverageResponseTime desc,
    Responses desc,
    MaxLinksLive desc,
    Name asc
| project-away TypeKey
